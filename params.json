{"tagline":"Java based restful ldap-authentication proxy server","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Using rest-auth-proxy server\r\n============================\r\n\r\nrest-auth-proxy is a Java based restful ldap-authentication http server that can be used to authenticate users against ldap and\r\nactive directory. It serves as an authentication proxy server between the calling application and the ldap servers. \r\nWith the use of a restful architecture it can be used by any application developed in any technology for user authentication. \r\nIt is very easy to setup and simple to use and also supports *base64* username and password encoding.\r\n\r\nBuilding from source\r\n--------------------\r\n\r\nFollow the steps below in order to build rest-auth-proxy from source. This requires git and maven:\r\n\r\n1. Checkout the source from git\r\n<pre><code> git clone git&#64;github.com:kamranzafar/rest-auth-proxy.git\r\n</code></pre>\r\n\r\n2. Compile and package using maven\r\n<pre><code> mvn clean compile package\r\n</code></pre>\r\n\r\nThis will compile the source and create a *rest-auth-proxy-dist.zip* file in the target directory, which can be used for installation.\r\n\r\nInstallation\r\n------------\r\n\r\nrest-auth-proxy server requires Java 6. Follow the below steps to install the server\r\n\r\n1. Make sure JAVA_HOME environment variable is set and pointing to the home directory of JDK/JRE\r\n2. Extract the contents of the dist-zip file to any location.\r\n3. Edit the *conf/auth.conf* file and set ldap server preferences. \r\n\r\nConfiguration\r\n-------------\r\n\r\nBelow is an example configuration, this needs to be in the *conf/auth.conf* file:\r\n<pre><code> ################## Server config\r\n\r\n # Server port\r\n server.port=9998\r\n\r\n # Server bind address\r\n server.bind=localhost\r\n\r\n ################## Ldap config\r\n \r\n ldap.host=localhost\r\n ldap.port=389 # optional, default is 389\r\n\r\n # ldap search base\r\n ldap.sbase=ou=People,dc=ldap,dc=local\r\n\r\n # ldap search filter (optional)\r\n ldap.sfilter=(objectclass=*)\r\n\r\n # ldap comma-separated lookup attributes\r\n ldap.lookup=cn,homeDirectory,loginShell\r\n\r\n # base64 encoding\r\n ldap.base64=true\r\n\r\n ################## Active directory specific config\r\n\r\n # Optional, but must be set to true for AD\r\n ldap.ad=false\r\n\r\n # AD domain (optional)\r\n ldap.ad.domain=MYDOMAIN\r\n</code></pre>\r\n\r\nIt is also possible to configure multiple ldap servers, below is an example.\r\n<pre><code> # Specify ldap server config names\r\nauth.servers=ldap1,ldap2\r\n\r\n# configuration for ldap1 auth server\r\nldap1.ldap.host=ldapserver1.hostname\r\nldap1.ldap.sbase=ou=People,dc=ldap,dc=local\r\nldap1.ldap.lookup=cn,homeDirectory,loginShell\r\nldap1.ldap.base64=false\r\n\r\n# configuration for ldap2 auth server\r\nldap2.ldap.host=ldapserver2.hostname\r\nldap2.ldap.sbase=ou=People,dc=ldap,dc=local\r\nldap2.ldap.lookup=cn,homeDirectory,loginShell\r\nldap2.ldap.base64=true\r\n</code></pre>\r\n\r\n*Note: Multiple server configuration is available from version 0.2*\r\n\r\nRunning the server\r\n------------------\r\n\r\nThe auth-proxy server can run on both windows and linux. Simply execute the *run.bat* file on windows or *run.sh* file on linux\r\nin order to run the auth proxy server. You can also install the batch file as a windows service using any Java service wrapper\r\ntools. The server by default logs INFO messages to console and captures a detailed log in *ras.log* file. The default logging \r\npreferences can be changed by updating the *conf/logging.properties* file.\r\n\r\nAuthentication\r\n--------------\r\n\r\nIn order to authenticate the user, the application can pass username and password as a HTTP GET or POST request like below:\r\n\r\n### Passing username and password as a GET request\r\nBelow is how to make GET request\r\n<pre><code> http://[server-ip]:9998/auth/ldap/username/password\r\n</code></pre>\r\n\r\nBelow is an example to authenticate against a named ldap server *(see multiple server config in the previous section)*\r\n<pre><code> http://[server-ip]:9998/auth/ldap/ldap1/username/password\r\n</code></pre>\r\n\r\n### Passing username and password as a POST request\r\nThe username and password can be passed as a POST request to the following URL.\r\n<pre><code> http://[server-ip]:9998/auth/ldap\r\n</code></pre>\r\n\r\nIt is also possible to specify a named ldap server, by passing the *server* parameter in the request.\r\n\r\n### Testing\r\nThe GET requests can be tested from a web browser. On linux you can also test authentication using curl like:\r\n<pre><code> curl http://[server-ip]:9998/auth/ldap/testuser/testpass\r\n curl -d \"server=ldap1&username=testuser&password=testpass\" http://[server-ip]:9998/auth/ldap\r\n</code></pre>\r\n\r\n#### Performance\r\nThe auth-proxy server can easily be performance tested using any load testing tool, below is an example on linux using *httperf*.\r\n<pre><code> httperf --server 127.0.1.1 --uri /auth/ldap/testuser/testpass --port 9998 --rate 10 --num-conns 500\r\n</code></pre>\r\n\r\n__The auth server has been tested against Active Directory and Open LDAP server__\r\n\r\n### Server response\r\nThe server response is in json format, and returns the following on successful authentication\r\n<pre><code> {\"status\":\"SUCCESS\",\"lookup\":{\"cn\":\"testuser\",\"homeDirectory\":\"/home/testuser\",\"loginShell\":\"/bin/bash\"}}\r\n</code></pre>\r\n\r\nIn case of error, the server returns an error response with a HTTP status code of 400, 401 or 500, depending on the error, below is \r\nan example of a HTTP 401 (Un-authorized) error:\r\n<pre><code> {\"status\":\"ERROR\", \"errorMessage\":\"[LDAP: error code 49 - Invalid Credentials]\"}\r\n</code></pre>\r\n\r\nThe auth-proxy server also supports base64 encoded username and password, which can easily be turned on/off by configuring the *ldap.base64* property\r\nin the *conf/auth.conf* configuration file. If base64 encoding is enabled, the username and password must be encoded before passing to the server.\r\n\r\nLicense\r\n-------\r\n\r\nThe rest-auth-proxy server is open source and is free to use for both personal and commercial purposes under the terms and\r\nconditions of [Apache Software License](http://www.apache.org/licenses/LICENSE-2.0.html \"ASL 2.0\").\r\n\r\n__Note: This document is in [markdown](http://daringfireball.net/projects/markdown \"Markdown\") format__\r\n","google":"","name":"rest-auth-proxy"}